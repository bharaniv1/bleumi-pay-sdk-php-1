<?php
/**
 * NetworkBalance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bleumi\Pay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bleumi Pay API
 *
 * A simple and powerful REST API to integrate ERC-20, Ethereum, xDai payments and/or payouts into your business or application
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@bleumi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bleumi\Pay\Model;

use \ArrayAccess;
use \Bleumi\Pay\ObjectSerializer;
use JsonSerializable;

/**
 * NetworkBalance Class Doc Comment
 *
 * @category Class
 * @package  Bleumi\Pay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkBalance implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkBalance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mainnet' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'xdai' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'goerli' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'kovan' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'rinkeby' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'ropsten' => 'map[string,\Bleumi\Pay\Model\WalletBalance]',
'xdai_testnet' => 'map[string,\Bleumi\Pay\Model\WalletBalance]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mainnet' => null,
'xdai' => null,
'goerli' => null,
'kovan' => null,
'rinkeby' => null,
'ropsten' => null,
'xdai_testnet' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mainnet' => 'mainnet',
'xdai' => 'xdai',
'goerli' => 'goerli',
'kovan' => 'kovan',
'rinkeby' => 'rinkeby',
'ropsten' => 'ropsten',
'xdai_testnet' => 'xdai_testnet'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mainnet' => 'setMainnet',
'xdai' => 'setXdai',
'goerli' => 'setGoerli',
'kovan' => 'setKovan',
'rinkeby' => 'setRinkeby',
'ropsten' => 'setRopsten',
'xdai_testnet' => 'setXdaiTestnet'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mainnet' => 'getMainnet',
'xdai' => 'getXdai',
'goerli' => 'getGoerli',
'kovan' => 'getKovan',
'rinkeby' => 'getRinkeby',
'ropsten' => 'getRopsten',
'xdai_testnet' => 'getXdaiTestnet'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mainnet'] = isset($data['mainnet']) ? $data['mainnet'] : null;
        $this->container['xdai'] = isset($data['xdai']) ? $data['xdai'] : null;
        $this->container['goerli'] = isset($data['goerli']) ? $data['goerli'] : null;
        $this->container['kovan'] = isset($data['kovan']) ? $data['kovan'] : null;
        $this->container['rinkeby'] = isset($data['rinkeby']) ? $data['rinkeby'] : null;
        $this->container['ropsten'] = isset($data['ropsten']) ? $data['ropsten'] : null;
        $this->container['xdai_testnet'] = isset($data['xdai_testnet']) ? $data['xdai_testnet'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mainnet
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getMainnet()
    {
        return $this->container['mainnet'];
    }

    /**
     * Sets mainnet
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $mainnet mainnet
     *
     * @return $this
     */
    public function setMainnet($mainnet)
    {
        $this->container['mainnet'] = $mainnet;

        return $this;
    }

    /**
     * Gets xdai
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getXdai()
    {
        return $this->container['xdai'];
    }

    /**
     * Sets xdai
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $xdai xdai
     *
     * @return $this
     */
    public function setXdai($xdai)
    {
        $this->container['xdai'] = $xdai;

        return $this;
    }

    /**
     * Gets goerli
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getGoerli()
    {
        return $this->container['goerli'];
    }

    /**
     * Sets goerli
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $goerli goerli
     *
     * @return $this
     */
    public function setGoerli($goerli)
    {
        $this->container['goerli'] = $goerli;

        return $this;
    }

    /**
     * Gets kovan
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getKovan()
    {
        return $this->container['kovan'];
    }

    /**
     * Sets kovan
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $kovan kovan
     *
     * @return $this
     */
    public function setKovan($kovan)
    {
        $this->container['kovan'] = $kovan;

        return $this;
    }

    /**
     * Gets rinkeby
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getRinkeby()
    {
        return $this->container['rinkeby'];
    }

    /**
     * Sets rinkeby
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $rinkeby rinkeby
     *
     * @return $this
     */
    public function setRinkeby($rinkeby)
    {
        $this->container['rinkeby'] = $rinkeby;

        return $this;
    }

    /**
     * Gets ropsten
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getRopsten()
    {
        return $this->container['ropsten'];
    }

    /**
     * Sets ropsten
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $ropsten ropsten
     *
     * @return $this
     */
    public function setRopsten($ropsten)
    {
        $this->container['ropsten'] = $ropsten;

        return $this;
    }

    /**
     * Gets xdai_testnet
     *
     * @return map[string,\Bleumi\Pay\Model\WalletBalance]
     */
    public function getXdaiTestnet()
    {
        return $this->container['xdai_testnet'];
    }

    /**
     * Sets xdai_testnet
     *
     * @param map[string,\Bleumi\Pay\Model\WalletBalance] $xdai_testnet xdai_testnet
     *
     * @return $this
     */
    public function setXdaiTestnet($xdai_testnet)
    {
        $this->container['xdai_testnet'] = $xdai_testnet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    /**
     * Customize the way json_encode() renders the object.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }
}
