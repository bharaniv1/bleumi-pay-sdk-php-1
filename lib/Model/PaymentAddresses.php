<?php
/**
 * PaymentAddresses
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bleumi\Pay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Bleumi Pay REST API
 *
 * A simple and powerful REST API to integrate ERC-20, Ethereum, xDai, Algorand payments and/or payouts into your business or application
 *
 * OpenAPI spec version: 1.0.0
 * Contact: info@bleumi.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.9-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bleumi\Pay\Model;

use \ArrayAccess;
use \Bleumi\Pay\ObjectSerializer;
use JsonSerializable;

/**
 * PaymentAddresses Class Doc Comment
 *
 * @category Class
 * @description Payment addresses
 * @package  Bleumi\Pay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentAddresses implements ModelInterface, ArrayAccess, JsonSerializable
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Payment_addresses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ethereum' => 'map[string,\Bleumi\Pay\Model\EthereumWalletAddress]',
'algorand' => 'map[string,\Bleumi\Pay\Model\AlgorandWalletAddress]',
'rsk' => 'map[string,\Bleumi\Pay\Model\EthereumWalletAddress]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ethereum' => null,
'algorand' => null,
'rsk' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ethereum' => 'ethereum',
'algorand' => 'algorand',
'rsk' => 'rsk'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ethereum' => 'setEthereum',
'algorand' => 'setAlgorand',
'rsk' => 'setRsk'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ethereum' => 'getEthereum',
'algorand' => 'getAlgorand',
'rsk' => 'getRsk'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ethereum'] = isset($data['ethereum']) ? $data['ethereum'] : null;
        $this->container['algorand'] = isset($data['algorand']) ? $data['algorand'] : null;
        $this->container['rsk'] = isset($data['rsk']) ? $data['rsk'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ethereum
     *
     * @return map[string,\Bleumi\Pay\Model\EthereumWalletAddress]
     */
    public function getEthereum()
    {
        return $this->container['ethereum'];
    }

    /**
     * Sets ethereum
     *
     * @param map[string,\Bleumi\Pay\Model\EthereumWalletAddress] $ethereum ethereum
     *
     * @return $this
     */
    public function setEthereum($ethereum)
    {
        $this->container['ethereum'] = $ethereum;

        return $this;
    }

    /**
     * Gets algorand
     *
     * @return map[string,\Bleumi\Pay\Model\AlgorandWalletAddress]
     */
    public function getAlgorand()
    {
        return $this->container['algorand'];
    }

    /**
     * Sets algorand
     *
     * @param map[string,\Bleumi\Pay\Model\AlgorandWalletAddress] $algorand algorand
     *
     * @return $this
     */
    public function setAlgorand($algorand)
    {
        $this->container['algorand'] = $algorand;

        return $this;
    }

    /**
     * Gets rsk
     *
     * @return map[string,\Bleumi\Pay\Model\EthereumWalletAddress]
     */
    public function getRsk()
    {
        return $this->container['rsk'];
    }

    /**
     * Sets rsk
     *
     * @param map[string,\Bleumi\Pay\Model\EthereumWalletAddress] $rsk rsk
     *
     * @return $this
     */
    public function setRsk($rsk)
    {
        $this->container['rsk'] = $rsk;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Customize the way json_encode() renders the object.
     */
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }
}
